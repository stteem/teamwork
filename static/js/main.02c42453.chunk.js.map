{"version":3,"sources":["components/loadingComponent.js","components/homeComponent.js","components/headerComponent.js","components/postComponent.js","shared/baseUrl.js","components/mainComponent.js","redux/ActionCreators.js","redux/ActionTypes.js","redux/auth.js","redux/feed.js","redux/postGif.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["Loading","className","Spinner","color","RenderFeedItem","str","feed","gif","onClick","item","RegExp","test","Card","CardBody","CardTitle","title","to","id","CardImg","width","src","alt","CardSubtitle","CardText","Feed","props","feeds","map","key","isLoading","errMess","Header","state","isNavOpen","isModalOpen","toggleNav","bind","toggleModal","handleLogin","handleLogout","this","setState","event","loginUser","email","value","password","preventDefault","logoutUser","Navbar","dark","expand","NavbarToggler","NavbarBrand","href","Collapse","isOpen","navbar","Nav","NavItem","auth","isAuthenticated","icon","faUser","size","user","Button","outline","isFetching","Jumbotron","Modal","toggle","ModalHeader","ModalBody","Form","onSubmit","FormGroup","Label","htmlFor","Input","type","name","innerRef","input","Component","RenderPostForm","isArticleModalOpen","toggleArticleModal","handleGifPost","e","postGif","image","target","files","console","log","faImage","style","faKeyboard","onChange","onChangeInput","CustomInput","label","onFileInputChange","ref","encType","handleArticlePost","for","rows","article","baseUrl","Main","fetchFeed","path","component","withRouter","connect","dispatch","creds","requestLogin","fetch","method","headers","body","JSON","stringify","then","response","ok","error","Error","status","statusText","json","storage","localStorage","setItem","token","firstname","receiveLogin","catch","message","removeItem","payload","data","file","form","FormData","refs","myForm","append","bearer","getItem","credentials","Auth","action","Gif","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02c42453.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Spinner } from 'reactstrap';\r\n\r\n\r\n/*export const Loading = () => {\r\n    return(\r\n        <div className=\"col-12\">\r\n            <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\r\n            <p>Loading . . .</p>\r\n        </div>\r\n    );\r\n};*/\r\n\r\nexport const Loading = () => {\r\n    return(\r\n        <div className=\"col-12\">\r\n      \t\t<Spinner color=\"primary\" />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport { Card, CardImg, CardTitle, CardBody, CardSubtitle, CardText } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './loadingComponent';\r\n\r\nfunction validURL(str) {\r\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\r\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n  return !!pattern.test(str);\r\n}\r\n\r\nfunction RenderFeedItem({ feed, gif, onClick }) {\r\n if (validURL(feed.item)) {\r\n    return(\r\n        <Card>\r\n            <CardBody>\r\n              <CardTitle>{feed.title}</CardTitle>\r\n            </CardBody>\r\n            <Link to={`/home/${feed.id}`} >\r\n                <CardImg width=\"100%\" src={feed.item} alt={feed.title} />\r\n            </Link>\r\n        </Card>\r\n    );\r\n }\r\n else {\r\n    return(\r\n        <Card>\r\n            <CardBody>\r\n              <CardTitle>{feed.title}</CardTitle>\r\n                <CardSubtitle></CardSubtitle>\r\n            </CardBody>\r\n            <CardBody>\r\n            <CardText>{feed.item}</CardText>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n }\r\n    \r\n}\r\n\r\nconst Feed = (props) => {\r\n\r\n    const feeds = props.feeds.feeds.map((feed) => {\r\n        return (\r\n            <div className=\"row centreItem\">\r\n                <div key={feed.id} className=\"col-12 col-md-8 m-1\">\r\n                    <RenderFeedItem feed={feed} />\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    \r\n\r\n    if (props.feeds.isLoading) {\r\n        return(\r\n            <div className=\"container spinner\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.feeds.errMess) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.feeds.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else\r\n        return (\r\n            <div className=\"container containerBorder\">\r\n                {feeds}\r\n            </div>\r\n        );\r\n}\r\n\r\n\r\n\r\nexport default Feed;","import React, { Component } from 'react';\r\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron, Button, Modal, ModalHeader, ModalBody,\r\n    Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n          isNavOpen: false,\r\n          isModalOpen: false\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleLogout = this.handleLogout.bind(this);\r\n    }\r\n\r\n    toggleNav() {\r\n        this.setState({\r\n          isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n          isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n\r\n  \thandleLogin(event) {\r\n        this.toggleModal();\r\n        this.props.loginUser({email: this.email.value, password: this.password.value});\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleLogout() {\r\n        this.props.logoutUser();\r\n    }\r\n    \r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Navbar dark expand=\"md\">\r\n                    <div className=\"container\">\r\n                        <NavbarToggler onClick={this.toggleNav} />\r\n                        <NavbarBrand className=\"mr-auto\" href=\"/\">\r\n                    \t</NavbarBrand>\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                            <Nav navbar>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\"  to='/home'><span className=\"fa fa-home fa-lg\"></span> Home</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to='/aboutus'><span className=\"fa fa-info fa-lg\"></span> About Us</NavLink>\r\n                            </NavItem>\r\n                            </Nav>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    { !this.props.auth.isAuthenticated ?\r\n                                        <Button outline onClick={this.toggleModal}>\r\n                                            <span className=\"fa fa-sign-in fa-lg\"></span> Login\r\n                                            {this.props.auth.isFetching ?\r\n                                                <span className=\"fa fa-spinner fa-pulse fa-fw\"></span>\r\n                                                : null\r\n                                            }\r\n                                        </Button>\r\n                                        :\r\n                                        <div>\r\n                                        <div className=\"navbar-text mr-3\"><FontAwesomeIcon icon={ faUser } size=\"lg\" /> {this.props.auth.user}</div>\r\n                                        <Button outline onClick={this.handleLogout}>\r\n                                            <span className=\"fa fa-sign-out fa-lg\"></span> Logout\r\n                                            {this.props.auth.isFetching ?\r\n                                                <span className=\"fa fa-spinner fa-pulse fa-fw\"></span>\r\n                                                : null\r\n                                            }\r\n                                        </Button>\r\n                                        </div>\r\n                                    }\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>\r\n                <Jumbotron>\r\n                    <div className=\"container\">\r\n                        <div className=\"row row-header\">\r\n                            <div className=\"col-12 col-sm-6\">\r\n                                <h1>TeamWork</h1>\r\n                                <p>Inspiration comes from the little Gifs of life!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                    \t<Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"email\">Email</Label>\r\n                                <Input type=\"text\" id=\"email\" name=\"email\"\r\n                                    innerRef={(input) => this.email = input} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\"\r\n                                    innerRef={(input) => this.password = input}  />\r\n                            </FormGroup>\r\n                           \r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faImage } from '@fortawesome/free-solid-svg-icons'\r\nimport { faKeyboard } from '@fortawesome/free-solid-svg-icons'\r\nimport { Modal, ModalHeader, ModalBody, Form, FormGroup, Input, CustomInput, Label, Button } from 'reactstrap';\r\n\r\n\r\n\r\n/*const RenderPostForm = () => {\r\n\treturn(\r\n\t\t<div className=\"container postdiv\">\r\n            <div className=\"row\">\r\n            </div>\r\n        </div>    \r\n    );\r\n}*/\r\n\r\nclass RenderPostForm extends Component {\r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n          isArticleModalOpen: false,\r\n          isModalOpen: false\r\n        };\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.toggleArticleModal = this.toggleArticleModal.bind(this);\r\n        this.handleGifPost = this.handleGifPost.bind(this);\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n          isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    toggleArticleModal() {\r\n    \tthis.setState({\r\n          isArticleModalOpen: !this.state.isArticleModalOpen\r\n        });\r\n    }\r\n\r\n    handleGifPost(event, e) {\r\n        this.toggleModal();\r\n        this.props.postGif({\r\n\r\n            title: this.title.value, \r\n            image: e.target.files[0],         \r\n        });\r\n        console.log(e.target.files[0]);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onFileInputChange(event) {\r\n        console.log(event.target.files[0]);\r\n    }\r\n\r\n    onChangeInput(e) {\r\n        console.log(e.target.value)\r\n    }\r\n\r\n    /*handleSubmit(event) {\r\n        this.props.postGif({title: this.title.value, image: event.target.files[0]});\r\n    }*/\r\n\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"container postdiv\">\r\n\t\t            <div className=\"row\">\r\n\t\t            <div className=\"articleField\"></div>\r\n\t\t            <Button className=\"gifbutton\" onClick={this.toggleModal}><FontAwesomeIcon icon={ faImage } style={{ color: 'purple' }} size=\"lg\" />  Post Gif</Button>\r\n\t\t            <Button className=\"gifbutton\" onClick={this.toggleArticleModal}><FontAwesomeIcon icon={ faKeyboard } style={{ color: 'violet' }} size=\"lg\" />  Post Article</Button>\r\n\t\t            </div>\r\n\t\t        </div>\r\n\t\t         <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Post Gif</ModalHeader>\r\n                    <ModalBody>\r\n                    \t<Form onSubmit={this.handleGifPost}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"title\">Title</Label>\r\n                                <Input type=\"text\" id=\"title\" name=\"title\"\r\n                                    innerRef={(input) => this.title=input}\r\n                                    onChange={this.onChangeInput} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"image\">Gif of Life</Label>\r\n        \t\t\t\t\t\t<CustomInput type=\"file\" id=\"image\" name=\"image\" label=\"Yo, pick a gif!\"\r\n                                onChange={this.onFileInputChange} />\r\n                                <form id=\"upload_form\" ref=\"myForm\" encType=\"multipart/form-data\">\r\n                                </form>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Post</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n                <Modal isOpen={this.state.isArticleModalOpen} toggle={this.toggleArticleModal}>\r\n                    <ModalHeader toggle={this.toggleArticleModal}>Post Article</ModalHeader>\r\n                    <ModalBody>\r\n                    \t<Form onSubmit={this.handleArticlePost}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"title\">Title</Label>\r\n                                <Input type=\"text\" id=\"title\" name=\"title\"\r\n                                    innerRef={(input) => this.title = input} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"article\">Article</Label>\r\n        \t\t\t\t\t\t<Input type=\"textarea\" name=\"article\" id=\"article\" rows=\"10\"\r\n        \t\t\t\t\t\tinnerRef={(input) => this.article=input} />\r\n                            </FormGroup>\r\n                           \r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Post</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default RenderPostForm;","//export const baseUrl = 'http://localhost:3000/';\r\nexport const baseUrl = 'https://secure-castle-56382.herokuapp.com/';","import React, {Component} from 'react';\r\nimport Feed from './homeComponent';\r\n//import { Navbar, NavbarBrand } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Header from './headerComponent';\r\nimport RenderPostForm from './postComponent';\r\n\r\nimport { loginUser, logoutUser, fetchFeed, postGif } from '../redux/ActionCreators';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      auth: state.auth,\r\n      feed: state.feeds,\r\n      gif: state.gif\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  loginUser: (creds) => dispatch(loginUser(creds)),\r\n  logoutUser: () => dispatch(logoutUser()),\r\n  fetchFeed: () => {dispatch(fetchFeed())},\r\n  postGif: (file) => dispatch(postGif(file))\r\n });\r\n\r\nclass Main extends Component {\r\n\r\n  componentDidMount(){\r\n    this.props.fetchFeed();\r\n  }\r\n\r\n  render() {\r\n\r\n    const HomePage = () => {\r\n      return(\r\n        <Feed feeds={this.props.feed} />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div /*className=\"App\"*/>\r\n        <Header auth={this.props.auth} \r\n          loginUser={this.props.loginUser} \r\n          logoutUser={this.props.logoutUser}\r\n          />\r\n        <RenderPostForm />\r\n        <Switch>\r\n              <Route path='/home' component={HomePage} />\r\n              <Redirect to=\"/home\" />\r\n          </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n","import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\n\r\nexport const requestLogin = (creds) => {\r\n    return {\r\n        type: ActionTypes.LOGIN_REQUEST,\r\n        creds\r\n    }\r\n}\r\n  \r\nexport const receiveLogin = (response) => {\r\n    return {\r\n        type: ActionTypes.LOGIN_SUCCESS,\r\n        token: response.token,\r\n        user: response.firstname\r\n    }\r\n}\r\n  \r\nexport const loginError = (message) => {\r\n    return {\r\n        type: ActionTypes.LOGIN_FAILURE,\r\n        message\r\n    }\r\n}\r\n\r\nexport const loginUser = (creds) => (dispatch) => {\r\n    // We dispatch requestLogin to kickoff the call to the API\r\n    dispatch(requestLogin(creds))\r\n\r\n    return fetch(baseUrl + 'api/v1/auth/signin', {\r\n        method: 'POST',\r\n        headers: { \r\n            'Content-Type':'application/json' \r\n        },\r\n        body: JSON.stringify(creds)\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n            console.log('response', response)\r\n            return response;\r\n        } else {\r\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n            console.log('error', error)\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n        },\r\n        error => {\r\n            throw error;\r\n        })\r\n    .then(response => response.json())\r\n    .then(response => {\r\n        console.log('response.json', response)\r\n        if (response) {\r\n            // If login was successful, set the token in local storage\r\n            const storage = localStorage.setItem('token', response.token);\r\n            localStorage.setItem('user', response.firstname);\r\n            console.log('storage', storage)\r\n            // Dispatch the success action\r\n            dispatch(receiveLogin(response));\r\n        }\r\n        else {\r\n            var error = new Error('Error ' + response.status);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    })\r\n    .catch(error => dispatch(loginError(error.message)))\r\n};\r\n\r\nexport const requestLogout = () => {\r\n    return {\r\n      type: ActionTypes.LOGOUT_REQUEST\r\n    }\r\n}\r\n  \r\nexport const receiveLogout = () => {\r\n    return {\r\n      type: ActionTypes.LOGOUT_SUCCESS\r\n    }\r\n}\r\n\r\n// Logs the user out\r\nexport const logoutUser = () => (dispatch) => {\r\n    dispatch(requestLogout())\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('creds');\r\n    dispatch(receiveLogout())\r\n}\r\n\r\n\r\n// FEED\r\n\r\nexport const feedLoading = () => {\r\n    return {\r\n        type: ActionTypes.FEED_LOADING,\r\n    }\r\n}\r\n\r\nexport const feedLoaded = (feeds) => {\r\n    return {\r\n        type: ActionTypes.FEED_LOADED,\r\n        payload: feeds\r\n    }\r\n}\r\n  \r\nexport const feedFailed = (errmess) => {\r\n    return {\r\n        type: ActionTypes.FEED_FAILED,\r\n        payload: errmess\r\n    }\r\n}\r\n\r\nexport const fetchFeed = () => (dispatch) => {\r\n    dispatch(feedLoading(true));\r\n\r\n    return fetch(baseUrl + 'api/v1/feed')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(feedLoaded(response.data)))\r\n        .catch(error => dispatch(feedFailed(error.message)));\r\n}\r\n\r\n\r\n//Post Gif\r\n\r\nexport const postGifloading = () => {\r\n    return {\r\n        type: ActionTypes.POST_GIF_LOADING\r\n    }\r\n}\r\n\r\nexport const postGifSuccess = (data) => {\r\n    return {\r\n        type: ActionTypes.POST_GIF_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const postGifFailed = (errmess) => {\r\n    return {\r\n        type: ActionTypes.POST_GIF_SUCCESS,\r\n        payload: errmess\r\n    }\r\n}\r\n        \r\n\r\nexport const postGif = (file) => (dispatch) => {\r\n    dispatch(postGifloading(true))\r\n\r\n    const form = new FormData(this.refs.myForm);\r\n    form.append('image', file);\r\n\r\n    const bearer = 'Bearer ' + localStorage.getItem('token'); \r\n\r\n    return fetch(baseUrl + 'api/v1/gifs', {\r\n        method: 'POST',\r\n        headers: { \r\n            'Authorization': bearer\r\n        },\r\n        body: form,\r\n        credentials: '*'\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n            console.log('response', response)\r\n            return response;\r\n        } else {\r\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n            console.log('error', error)\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n        },\r\n        error => {\r\n            throw error;\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(postGifSuccess(response)))\r\n        .catch(error => dispatch(postGifFailed(error.message)));\r\n}","export const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\r\nexport const FEED_LOADING = 'FEED_LOADING';\r\nexport const FEED_FAILED = 'FEED_FAILED';\r\nexport const FEED_LOADED = 'FEED_LOADED';\r\nexport const POST_GIF_SUCCESS = 'POST_GIF_SUCCESS';\r\nexport const POST_GIF_LOADING = 'POST_GIF_LOADING';\r\nexport const POST_GIF_FAILED = 'POST_GIF_FAILED';\r\n","import * as ActionTypes from './ActionTypes';\r\n\r\n// The auth reducer. The starting state sets authentication\r\n// based on a token being in local storage. In a real app,\r\n// we would also want a util to check if the token is expired.\r\nexport const Auth = (state = {\r\n        isLoading: false,\r\n        isAuthenticated: localStorage.getItem('token') ? true : false,\r\n        token: localStorage.getItem('token'),\r\n        user: localStorage.getItem('user'),\r\n        errMess: null\r\n    }, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.LOGIN_REQUEST:\r\n            return {...state,\r\n                isLoading: true,\r\n                isAuthenticated: false,\r\n                user: action.creds\r\n            };\r\n        case ActionTypes.LOGIN_SUCCESS:\r\n            return {...state,\r\n                isLoading: false,\r\n                isAuthenticated: true,\r\n                errMess: '',\r\n                token: action.token,\r\n                user: action.user\r\n            };\r\n        case ActionTypes.LOGIN_FAILURE:\r\n            return {...state,\r\n                isLoading: false,\r\n                isAuthenticated: false,\r\n                errMess: action.message\r\n            };\r\n        case ActionTypes.LOGOUT_REQUEST:\r\n            return {...state,\r\n                isLoading: true,\r\n                isAuthenticated: true\r\n            };\r\n        case ActionTypes.LOGOUT_SUCCESS:\r\n            return {...state,\r\n                isLoading: false,\r\n                isAuthenticated: false,\r\n                token: '',\r\n                user: null\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Feed = (state = {\r\n        isLoading: true,\r\n        errMess: null,\r\n        feeds: []\r\n    }, action) => {\r\n    switch(action.type) {\r\n        case ActionTypes.FEED_LOADED:\r\n            return {...state, isLoading: false, errMess: null, feeds: action.payload};\r\n\r\n        case ActionTypes.FEED_LOADING:\r\n            return {...state, isLoading: true, errMess: null, feeds: []};\r\n\r\n        case ActionTypes.FEED_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload, feeds: []};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Gif = (state = {\r\n        isLoading: true,\r\n        errMess: null,\r\n        data: []\r\n    }, action) => {\r\n    switch(action.type) {\r\n        case ActionTypes.POST_GIF_SUCCESS:\r\n            return {...state, isLoading: false, errMess: null, data: action.payload};\r\n\r\n        case ActionTypes.POST_GIF_LOADING:\r\n            return {...state, isLoading: true, errMess: null, data: []};\r\n\r\n        case ActionTypes.POST_GIF_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload, data: []};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, {Component} from 'react';\nimport Main from './components/mainComponent';\n//import Header from './components/header';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\n\nconst store = ConfigureStore();\n\nclass App extends Component {\n\n\n  render() {\n    return (\n    <Provider store={store}>\n      <BrowserRouter>\n      <div className=\"App\">\n        <Main/>\n      </div>\n      </BrowserRouter>\n    </Provider>\n    );\n  }\n}\n\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { Auth } from './auth';\r\nimport { Feed } from './feed';\r\nimport { Gif } from './postGif';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\n\r\n\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            auth: Auth,\r\n            feeds: Feed,\r\n            gif: Gif\r\n        }),\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n\r\n    return store;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}